openapi: 3.0.2
info:
  title: 'Mathrix Education SA API'
  description: 'This is the official documentation of Mathrix Education SA API.'
  contact:
    name: 'Mathieu Bour'
    email: mathieu@mathrix.fr
  version: ''
  x-logo:
    url: 'https://cdn.mathrix.fr/img/logo-redoc.png'
    href: 'https://mathrix.fr'
    altText: 'Mathrix Education Logo'
servers:
  -
    url: 'https://mathrixdrive.fr/api'
    description: 'The production API.'
  -
    url: 'https://dev.mathrixdrive.fr/api'
    description: 'The development API.'
paths:
  /auth/forgot:
    post:
      summary: 'Forgot password'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  description: 'The user email.'
                  type: string
                  example: john.doe@example.org
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    description: 'The error standardized name.'
                    type: boolean
                    enum:
                      - true
                  message:
                    description: 'The message.'
                    type: string
                    example: 'Reset email sent successfully'
        400:
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    description: 'The error message.'
                    type: string
                    enum:
                      - bad_request
                  message:
                    description: 'The error detailed message.'
                    type: string
                    enum:
                      - 'Cannot reset password of a facebook account'
      tags:
        - Auth
  /auth/login:
    post:
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: 'The user email.'
                  type: string
                  example: john.doe@example.com
                password:
                  description: 'The user password.'
                  type: string
                  example: MyExtreme$Pwd
      responses:
        200:
          $ref: '#/components/responses/200_Token'
        401:
          description: 'Invalid credentials.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    description: 'The error message.'
                    type: string
                    enum:
                      - invalid_credentials
                  message:
                    description: 'The error detailed message.'
                    type: string
                    enum:
                      - 'The given credentials were invalid.'
      tags:
        - Auth
  '/auth/reset/{token}':
    post:
      summary: 'Reset password'
      description: 'Reset a password using a reset token, which is a UUID v4.'
      parameters:
        -
          name: token
          in: path
          description: "The reset token, which is a UUID v4. In non-production environments, it will always be `5dfdbb0c-61a5-4ac8-bfc7-788aa16311ee` for testing purposes.\n"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  description: 'The new user password.'
                  type: string
                  format: password
                  example: My$uperNewPa$$w0rd
      responses:
        200:
          description: 'The user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    description: 'The response data'
                    type: object
                    properties:
                      email:
                        description: 'The user email'
                        type: string
                        format: email
                        example: john.doe@example.com
      tags:
        - Auth
  '/files/explore[/{directory}]':
    get:
      summary: 'Explore a directory.'
      description: 'Display the content of a **directory** on the CDN.'
      security:
        -
          bearer:
            - 'files:read'
      parameters:
        -
          name: directory
          in: path
          description: 'The directory path on the CDN.'
          schema:
            type: string
            example: test
      responses:
        200:
          description: 'The directory content.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - directories
                  - files
                properties:
                  directories:
                    description: 'The subdirectories inside the targeted directory.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Directory'
                  files:
                    description: 'The files inside the targeted directory.'
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    description: 'The error.'
                    type: string
                    enum:
                      - bad_request
                  message:
                    description: 'The error description.'
                    type: string
                    example: 'b/b.txt is not a directory.'
        404:
          $ref: '#/components/responses/404_FileNotFound'
      tags:
        - Files
  /files/multi:
    post:
      summary: Multi-upload.
      security:
        -
          bearer:
            - 'files:write'
      requestBody:
        description: "The request body contains only on key, which is the file itself.\nThe filename is determined by the path in the URI. Note that the `Content-Type` is note `application/json` but\n`application/x-www-form-urlencoded` which allow file upload.\n\nThe request body is an arbitrary object which can hold an unlimited amount of files, one per key."
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties: {  }
              example:
                file-1: '<< file-1 >>'
                file-2: '<< file-2 >>'
      responses:
        200:
          description: 'The moved file metadata.'
          content:
            application/json:
              schema:
                type: object
                properties: {  }
                example:
                  file-1: 00f9b301-1a62-498a-837c-1ccdc065a3b7
                  file-2: 44405c3e-0af5-4709-805d-2f728a4cc103
      tags:
        - Files
  '/files/{file}':
    post:
      summary: 'Upload a file'
      description: 'Upload a file to the CDN.'
      security:
        -
          bearer:
            - 'files:write'
      parameters:
        -
          name: path
          in: path
          description: 'The file path on the CDN. For example, if you want to upload the file to {CDN}/img/logo.png, then the upload URI will be POST https://{API}/files/img/logo.png.'
          required: true
          schema:
            type: string
            example: test/foo.jpg
      requestBody:
        description: 'The request body contains only on key, which is the file itself. The filename is determined by the path in the URI. Note that the `Content-Type` is note `application/json` but `application/x-www-form-urlencoded` which allow file upload.'
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                file:
                  description: 'The file content.'
                  type: object
      responses:
        200:
          description: 'The uploaded file metadata.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
      tags:
        - Files
    get:
      summary: 'Get file info'
      description: 'Display the metadata of a file on the CDN.'
      security:
        -
          bearer:
            - 'files:read'
      parameters:
        -
          name: path
          in: path
          description: 'The file path on the CDN.'
          required: true
          schema:
            type: string
            example: test/foo.jpg
      responses:
        200:
          description: 'The file metadata.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        404:
          $ref: '#/components/responses/404_FileNotFound'
      tags:
        - Files
    patch:
      summary: 'Rename/Move file'
      description: 'Rename or move a file on the CDN.'
      security:
        -
          bearer:
            - 'files:write'
      parameters:
        -
          name: path
          in: path
          description: 'The file path on the CDN.'
          required: true
          schema:
            type: string
            example: test/foo.jpg
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                destination:
                  description: 'The file destination path on the CDN.'
                  type: string
                  example: test/foo2.jpg
      responses:
        200:
          description: 'The moved file metadata.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        404:
          $ref: '#/components/responses/404_FileNotFound'
      tags:
        - Files
    delete:
      summary: 'Delete file'
      description: 'Delete a file on the CDN.'
      security:
        -
          bearer:
            - 'files:delete'
      parameters:
        -
          name: path
          in: path
          description: 'The file path on the CDN.'
          required: true
          schema:
            type: string
            example: test/foo.jpg
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the file deletion was successful.'
                    type: boolean
                    example: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'File `test/foo.jpg` was successfully deleted.'
        404:
          $ref: '#/components/responses/404_FileNotFound'
      tags:
        - Files
  /groups:
    get:
      summary: 'Paginate groups'
      description: 'Retrieve all groups by ascending ids, paginated.'
      parameters:
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '1'
          required: true
          style: form
        -
          name: perPage
          in: query
          description: 'The number of groups per page.'
          schema:
            type: integer
          example: 100
          required: true
          style: form
      responses:
        200:
          description: 'The groups in a paginated response.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: '1'
                    readOnly: true
                  per_page:
                    description: 'The number of groups per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of groups processed.'
                    type: integer
                    example: '22'
                    readOnly: true
                  data:
                    description: 'The groups as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
                    readOnly: true
      security:
        -
          bearer:
            - 'groups:read'
      tags:
        - Groups
    post:
      summary: 'Post group'
      description: 'Create a new group, and insert it in the database, then retrieve it.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: 'The newly created group.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Group'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'groups:write'
      tags:
        - Groups
  '/groups/{groupId}':
    get:
      summary: 'Get group'
      parameters:
        -
          name: groupId
          in: path
          description: 'The group id.'
          required: true
          schema:
            type: integer
            example: '79'
      responses:
        200:
          description: 'The requested group.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Group'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'groups:read'
      tags:
        - Groups
    patch:
      summary: 'Patch group'
      parameters:
        -
          name: groupId
          in: path
          description: 'The group id.'
          required: true
          schema:
            type: integer
            example: '65'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: 'The patched group.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Group'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'groups:write'
      tags:
        - Groups
    delete:
      summary: 'Delete group'
      parameters:
        -
          name: groupId
          in: path
          description: 'The group id.'
          required: true
          schema:
            type: integer
            example: '330'
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the deletion was sucessful.'
                    type: boolean
                    default: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'Group id 330 was successfully deleted.'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'groups:delete'
      tags:
        - Groups
  '/groups/{groupId}/series':
    get:
      summary: 'Get related series'
      description: 'Retrieve all series linked to a given group id, paginated.'
      parameters:
        -
          name: groupId
          in: path
          description: 'The group id'
          schema:
            type: integer
          example: '732'
          required: true
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '2'
          required: true
        -
          name: perPage
          in: query
          description: 'The number of series per page.'
          schema:
            type: integer
          example: 100
          required: true
      responses:
        200:
          description: 'The series in a paginator.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: 4
                    readOnly: true
                  per_page:
                    description: 'The number of series per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of series processed.'
                    type: integer
                    example: 1845
                    readOnly: true
                  data:
                    description: 'The series as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Series'
                    readOnly: true
      tags:
        - Groups
    patch:
      summary: 'Patch related series'
      description: 'Retrieve all series linked to a given group id, paginated.'
      parameters:
        -
          name: groupId
          in: path
          description: 'The group id'
          schema:
            type: integer
          example: '765'
          required: true
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '7'
          required: true
        -
          name: perPage
          in: query
          description: 'The number of @relatedPlural@ per page.'
          schema:
            type: integer
          example: 10
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: 'The group series ids.'
              type: array
              items:
                description: 'The group series id.'
                type: int
              example:
                - 1
                - 12
                - 15
                - 18
      responses:
        200:
          description: 'The patched group series.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: 0
                    readOnly: true
                  per_page:
                    description: 'The number of series per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of series processed.'
                    type: integer
                    example: 25
                    readOnly: true
                  data:
                    description: 'The series as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Series'
                    readOnly: true
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'groups:write'
      tags:
        - Groups
  /questions:
    get:
      summary: 'Paginate questions'
      description: 'Retrieve all questions by ascending ids, paginated.'
      parameters:
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '7'
          required: true
          style: form
        -
          name: perPage
          in: query
          description: 'The number of questions per page.'
          schema:
            type: integer
          example: 100
          required: true
          style: form
      responses:
        200:
          description: 'The questions in a paginated response.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: '7'
                    readOnly: true
                  per_page:
                    description: 'The number of questions per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of questions processed.'
                    type: integer
                    example: '79'
                    readOnly: true
                  data:
                    description: 'The questions as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
                    readOnly: true
      security:
        -
          bearer:
            - 'questions:read'
      tags:
        - Questions
    post:
      summary: 'Post question'
      description: 'Create a new question, and insert it in the database, then retrieve it.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          description: 'The newly created question.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Question'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'questions:write'
      tags:
        - Questions
  '/questions/{questionId}':
    get:
      summary: 'Get question'
      parameters:
        -
          name: questionId
          in: path
          description: 'The question id.'
          required: true
          schema:
            type: integer
            example: '658'
      responses:
        200:
          description: 'The requested question.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Question'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'questions:read'
      tags:
        - Questions
    patch:
      summary: 'Patch question'
      parameters:
        -
          name: questionId
          in: path
          description: 'The question id.'
          required: true
          schema:
            type: integer
            example: '94'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          description: 'The patched question.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Question'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'questions:write'
      tags:
        - Questions
    delete:
      summary: 'Delete question'
      parameters:
        -
          name: questionId
          in: path
          description: 'The question id.'
          required: true
          schema:
            type: integer
            example: '591'
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the deletion was sucessful.'
                    type: boolean
                    default: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'Question id 591 was successfully deleted.'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'questions:delete'
      tags:
        - Questions
  /results:
    post:
      summary: 'Submit result'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                series_id:
                  description: 'The series id.'
                  type: int
                  example: 17
                answsers:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - choices
                    properties:
                      id:
                        description: 'The question id.'
                        type: integer
                        example: 17
                      choices:
                        description: 'The user choices for this question.'
                        type: array
                        items: { type: integer }
                        example: [0, 2]
                    example:
                      -
                        id: 17
                        choices: [0, 2]
                      -
                        id: 23
                        choices: [0]
                      -
                        id: 136
                        choices: [2, 3]
      responses:
        200:
          description: 'The newly created result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Result'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      tags:
        - Results
  /series:
    get:
      summary: 'Paginate series'
      description: 'Retrieve all series by ascending ids, paginated.'
      parameters:
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '5'
          required: true
          style: form
        -
          name: perPage
          in: query
          description: 'The number of series per page.'
          schema:
            type: integer
          example: 100
          required: true
          style: form
      responses:
        200:
          description: 'The series in a paginated response.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: '5'
                    readOnly: true
                  per_page:
                    description: 'The number of series per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of series processed.'
                    type: integer
                    example: '42'
                    readOnly: true
                  data:
                    description: 'The series as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Series'
                    readOnly: true
      security:
        -
          bearer:
            - 'series:read'
      tags:
        - Series
    post:
      summary: 'Post series'
      description: 'Create a new series, and insert it in the database, then retrieve it.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Series'
      responses:
        200:
          description: 'The newly created series.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Series'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'series:write'
      tags:
        - Series
  '/series/difficulty/{seriesDifficulty}':
    get:
      summary: 'Get series by difficulty'
      description: 'Get the first series which matches the given @key@.'
      parameters:
        -
          name: seriesDifficulty
          in: path
          description: 'The series difficulty.'
          required: true
          schema:
            type: string
            example: none
      responses:
        200:
          description: 'The requested series.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      tags:
        - Series
  '/series/{seriesId}':
    get:
      summary: 'Get series'
      parameters:
        -
          name: seriesId
          in: path
          description: 'The series id.'
          required: true
          schema:
            type: integer
            example: '18'
      responses:
        200:
          description: 'The requested series.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Series'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'series:read'
      tags:
        - Series
    patch:
      summary: 'Patch series'
      parameters:
        -
          name: seriesId
          in: path
          description: 'The series id.'
          required: true
          schema:
            type: integer
            example: '86'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Series'
      responses:
        200:
          description: 'The patched series.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Series'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'series:write'
      tags:
        - Series
    delete:
      summary: 'Delete series'
      parameters:
        -
          name: seriesId
          in: path
          description: 'The series id.'
          required: true
          schema:
            type: integer
            example: '291'
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the deletion was sucessful.'
                    type: boolean
                    default: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'Series id 291 was successfully deleted.'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'series:delete'
      tags:
        - Series
  '/series/{seriesId}/questions':
    get:
      summary: 'Get related questions'
      description: 'Retrieve all questions linked to a given series id, paginated.'
      parameters:
        -
          name: seriesId
          in: path
          description: 'The series id'
          schema:
            type: integer
          example: '111'
          required: true
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '10'
          required: true
        -
          name: perPage
          in: query
          description: 'The number of questions per page.'
          schema:
            type: integer
          example: 100
          required: true
      responses:
        200:
          description: 'The questions in a paginator.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: 4
                    readOnly: true
                  per_page:
                    description: 'The number of questions per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of questions processed.'
                    type: integer
                    example: 1845
                    readOnly: true
                  data:
                    description: 'The questions as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
                    readOnly: true
      security:
        -
          bearer:
            - 'series:read'
      tags:
        - Series
    patch:
      summary: 'Patch related questions'
      description: 'Retrieve all questions linked to a given series id, paginated.'
      parameters:
        -
          name: seriesId
          in: path
          description: 'The series id'
          schema:
            type: integer
          example: '675'
          required: true
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '5'
          required: true
        -
          name: perPage
          in: query
          description: 'The number of @relatedPlural@ per page.'
          schema:
            type: integer
          example: 10
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: 'The series questions ids.'
              type: array
              items:
                description: 'The series questions id.'
                type: int
              example:
                - 1
                - 12
                - 15
                - 18
      responses:
        200:
          description: 'The patched series questions.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: 0
                    readOnly: true
                  per_page:
                    description: 'The number of questions per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of questions processed.'
                    type: integer
                    example: 25
                    readOnly: true
                  data:
                    description: 'The questions as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
                    readOnly: true
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'series:write'
      tags:
        - Series
  /situations:
    get:
      summary: 'Paginate situations'
      description: 'Retrieve all situations by ascending ids, paginated.'
      parameters:
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '4'
          required: true
          style: form
        -
          name: perPage
          in: query
          description: 'The number of situations per page.'
          schema:
            type: integer
          example: 100
          required: true
          style: form
      responses:
        200:
          description: 'The situations in a paginated response.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: '4'
                    readOnly: true
                  per_page:
                    description: 'The number of situations per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of situations processed.'
                    type: integer
                    example: '51'
                    readOnly: true
                  data:
                    description: 'The situations as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Situation'
                    readOnly: true
      security:
        -
          bearer:
            - 'situations:read'
      tags:
        - Situations
    post:
      summary: 'Post situation'
      description: 'Create a new situation, and insert it in the database, then retrieve it.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Situation'
      responses:
        200:
          description: 'The newly created situation.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Situation'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'situations:write'
      tags:
        - Situations
  '/situations/{situationId}':
    get:
      summary: 'Get situation'
      parameters:
        -
          name: situationId
          in: path
          description: 'The situation id.'
          required: true
          schema:
            type: integer
            example: '754'
      responses:
        200:
          description: 'The requested situation.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Situation'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'situations:read'
      tags:
        - Situations
    patch:
      summary: 'Patch situation'
      parameters:
        -
          name: situationId
          in: path
          description: 'The situation id.'
          required: true
          schema:
            type: integer
            example: '65'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Situation'
      responses:
        200:
          description: 'The patched situation.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Situation'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'situations:write'
      tags:
        - Situations
    delete:
      summary: 'Delete situation'
      parameters:
        -
          name: situationId
          in: path
          description: 'The situation id.'
          required: true
          schema:
            type: integer
            example: '389'
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the deletion was sucessful.'
                    type: boolean
                    default: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'Situation id 389 was successfully deleted.'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'situations:delete'
      tags:
        - Situations
  /tags:
    get:
      summary: 'Paginate tags'
      description: 'Retrieve all tags by ascending ids, paginated.'
      parameters:
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '2'
          required: true
          style: form
        -
          name: perPage
          in: query
          description: 'The number of tags per page.'
          schema:
            type: integer
          example: 100
          required: true
          style: form
      responses:
        200:
          description: 'The tags in a paginated response.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: '2'
                    readOnly: true
                  per_page:
                    description: 'The number of tags per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of tags processed.'
                    type: integer
                    example: '24'
                    readOnly: true
                  data:
                    description: 'The tags as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                    readOnly: true
      security:
        -
          bearer:
            - 'tags:read'
      tags:
        - Tags
    post:
      summary: 'Post tag'
      description: 'Create a new tag, and insert it in the database, then retrieve it.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        200:
          description: 'The newly created tag.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Tag'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'tags:write'
      tags:
        - Tags
  '/tags/{tagId}':
    get:
      summary: 'Get tag'
      parameters:
        -
          name: tagId
          in: path
          description: 'The tag id.'
          required: true
          schema:
            type: integer
            example: '690'
      responses:
        200:
          description: 'The requested tag.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Tag'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'tags:read'
      tags:
        - Tags
    patch:
      summary: 'Patch tag'
      parameters:
        -
          name: tagId
          in: path
          description: 'The tag id.'
          required: true
          schema:
            type: integer
            example: '24'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        200:
          description: 'The patched tag.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Tag'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'tags:write'
      tags:
        - Tags
    delete:
      summary: 'Delete tag'
      parameters:
        -
          name: tagId
          in: path
          description: 'The tag id.'
          required: true
          schema:
            type: integer
            example: '372'
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the deletion was sucessful.'
                    type: boolean
                    default: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'Tag id 372 was successfully deleted.'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'tags:delete'
      tags:
        - Tags
  /themes:
    get:
      summary: 'Paginate themes'
      description: 'Retrieve all themes by ascending ids, paginated.'
      parameters:
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '10'
          required: true
          style: form
        -
          name: perPage
          in: query
          description: 'The number of themes per page.'
          schema:
            type: integer
          example: 100
          required: true
          style: form
      responses:
        200:
          description: 'The themes in a paginated response.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: '10'
                    readOnly: true
                  per_page:
                    description: 'The number of themes per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of themes processed.'
                    type: integer
                    example: '71'
                    readOnly: true
                  data:
                    description: 'The themes as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Theme'
                    readOnly: true
      security:
        -
          bearer:
            - 'themes:read'
      tags:
        - Themes
    post:
      summary: 'Post theme'
      description: 'Create a new theme, and insert it in the database, then retrieve it.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theme'
      responses:
        200:
          description: 'The newly created theme.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Theme'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'themes:write'
      tags:
        - Themes
  '/themes/{themeId}':
    get:
      summary: 'Get theme'
      parameters:
        -
          name: themeId
          in: path
          description: 'The theme id.'
          required: true
          schema:
            type: integer
            example: '335'
      responses:
        200:
          description: 'The requested theme.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Theme'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'themes:read'
      tags:
        - Themes
    patch:
      summary: 'Patch theme'
      parameters:
        -
          name: themeId
          in: path
          description: 'The theme id.'
          required: true
          schema:
            type: integer
            example: '6'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theme'
      responses:
        200:
          description: 'The patched theme.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/Theme'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'themes:write'
      tags:
        - Themes
    delete:
      summary: 'Delete theme'
      parameters:
        -
          name: themeId
          in: path
          description: 'The theme id.'
          required: true
          schema:
            type: integer
            example: '969'
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the deletion was sucessful.'
                    type: boolean
                    default: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'Theme id 969 was successfully deleted.'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'themes:delete'
      tags:
        - Themes
  '/themes/{themeId}/questions':
    get:
      summary: 'Get related questions'
      description: 'Retrieve all questions linked to a given theme id, paginated.'
      parameters:
        -
          name: themeId
          in: path
          description: 'The theme id'
          schema:
            type: integer
          example: '594'
          required: true
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '0'
          required: true
        -
          name: perPage
          in: query
          description: 'The number of questions per page.'
          schema:
            type: integer
          example: 100
          required: true
      responses:
        200:
          description: 'The questions in a paginator.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: 4
                    readOnly: true
                  per_page:
                    description: 'The number of questions per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of questions processed.'
                    type: integer
                    example: 1845
                    readOnly: true
                  data:
                    description: 'The questions as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
                    readOnly: true
      security:
        -
          bearer:
            - 'themes:read'
      tags:
        - Themes
  /users:
    get:
      summary: 'Paginate users'
      description: 'Retrieve all users by ascending ids, paginated.'
      parameters:
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '8'
          required: true
          style: form
        -
          name: perPage
          in: query
          description: 'The number of users per page.'
          schema:
            type: integer
          example: 100
          required: true
          style: form
      responses:
        200:
          description: 'The users in a paginated response.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: '8'
                    readOnly: true
                  per_page:
                    description: 'The number of users per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of users processed.'
                    type: integer
                    example: '44'
                    readOnly: true
                  data:
                    description: 'The users as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    readOnly: true
      security:
        -
          bearer:
            - 'users:read'
      tags:
        - Users
    post:
      summary: 'Post user'
      description: 'Create a new user, and insert it in the database, then retrieve it.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'The newly created user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/User'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'users:write'
      tags:
        - Users
  '/users/{userId}':
    get:
      summary: 'Get user'
      parameters:
        -
          name: userId
          in: path
          description: 'The user id.'
          required: true
          schema:
            type: integer
            example: '908'
      responses:
        200:
          description: 'The requested user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'users:read'
      tags:
        - Users
    patch:
      summary: 'Patch user'
      parameters:
        -
          name: userId
          in: path
          description: 'The user id.'
          required: true
          schema:
            type: integer
            example: '3'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'The patched user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the request succeeded.'
                    type: boolean
                    enum:
                      - true
                  data:
                    $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
        422:
          $ref: '#/components/responses/422_ModelValidation'
      security:
        -
          bearer:
            - 'users:write'
      tags:
        - Users
    delete:
      summary: 'Delete user'
      parameters:
        -
          name: userId
          in: path
          description: 'The user id.'
          required: true
          schema:
            type: integer
            example: '211'
      responses:
        200:
          description: 'The deletion result.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: 'If the deletion was sucessful.'
                    type: boolean
                    default: true
                  message:
                    description: 'The deletion message.'
                    type: string
                    example: 'User id 211 was successfully deleted.'
        404:
          $ref: '#/components/responses/404_ModelNotFound'
      security:
        -
          bearer:
            - 'users:delete'
      tags:
        - Users
  '/users/{userId}/results':
    get:
      summary: 'Get related results'
      description: 'Retrieve all results linked to a given user id, paginated.'
      parameters:
        -
          name: userId
          in: path
          description: 'The user id'
          schema:
            type: integer
          example: '155'
          required: true
        -
          name: page
          in: query
          description: 'The page **(starts at 0)**.'
          schema:
            type: integer
          example: '4'
          required: true
        -
          name: perPage
          in: query
          description: 'The number of results per page.'
          schema:
            type: integer
          example: 100
          required: true
      responses:
        200:
          description: 'The results in a paginator.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - per_page
                  - total
                  - data
                properties:
                  page:
                    description: 'The current page.'
                    type: integer
                    example: 4
                    readOnly: true
                  per_page:
                    description: 'The number of results per page.'
                    type: integer
                    example: 100
                    readOnly: true
                  total:
                    description: 'The total number of results processed.'
                    type: integer
                    example: 1845
                    readOnly: true
                  data:
                    description: 'The results as an array.'
                    type: array
                    items:
                      $ref: '#/components/schemas/Result'
                    readOnly: true
      tags:
        - Users
components:
  securitySchemes:
    bearer:
      description: 'The standard user authorizations.'
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    200_SuccessMessage:
      description: Success.
      content:
        application/json:
          schema:
            type: object
            required:
              - success
              - message
            properties:
              success:
                description: 'The error standardized name.'
                type: boolean
                enum:
                  - true
              message:
                description: 'The message.'
                type: string
    200_Token:
      description: 'The JWT token.'
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                description: "The token, JWT-serialized. Check [jwt.io](jwt.io) for more details about JSON Web Tokens.\n"
                type: string
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzUxMiJ9.eyJpc3MiOiJNYXRocml4IEVkd WNhdGlvbiBBUEkiLCJzdWIiOjE4LCJhdWQiOiJNYXRocml4IEVkdWNhdGlvbiB BUEkiLCJleHAiOjE1NjQ3Nzg2MzEsIm5iZiI6MTU1NjgyOTgzMSwiaWF0IjoxN TU2ODI5ODMxLCJqdGkiOiI2NWFkYmU3Ny1kYmE0LTRmN2EtODMyMC1hZTEwOTI 0YmM2NDQifQ.Ae5bU6JaTDQnwNeTOqGNd_S_Tz7xjT6vMGjByVOhsI4dmrxpom 5054QDIhMiGKGfE0epQEAabU3os_KmMWw3__1hAWODFBwYOrm27Kt4oV3OfKie 7NrPbig4RvuxBgYAn8derTwj43vR5psyn-x4tyurj_nY3_zz13Qela5f0sjf1w M3\n"
    401_Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            type: object
            required:
              - error
              - message
            properties:
              error:
                description: 'The error standardized name.'
                type: string
                enum:
                  - unauthorized
              message:
                description: 'The error message.'
                type: string
                example: 'lorem ipsum'
    404_FileNotFound:
      description: 'File not found.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: 'The error message.'
                type: string
                example: file_not_found
              message:
                description: 'The error detailed message.'
                type: string
                example: 'The file test/foo.jpg does not exist.'
    404_ModelNotFound:
      description: 'Model not found.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: 'The error message.'
                type: string
                example: model_not_found
    422_ModelValidation:
      description: 'Model failed to pass validation.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: 'The error description.'
                type: string
                example: model_validation
    422_Validation:
      description: 'Model failed to pass validation.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: 'The error description.'
                type: string
                example: validation
              errors:
                description: 'The validation errors'
                type: object
                properties:
                  field:
                    type: string
                    example: 'value is not...'
  schemas:
    Answer:
      description: Answer
      type: object
      additionalProperties: false
      required:
        - result_id
        - question_id
        - choices
      properties:
        result_id:
          description: 'The result id.'
          type: integer
          example: 17
        question_id:
          description: 'The question id.'
          type: integer
          example: 72
        choices:
          description: 'The choices made by the user.'
          type: array
          items:
            type: integer
          example:
            -
              id: 17
              choices:
                - 0
                - 2
            -
              id: 23
              choices:
                - 0
            -
              id: 136
              choices:
                - 2
                - 3
    Directory:
      description: Directory
      type: object
      additionalProperties: false
      required:
        - type
        - path
        - dirname
        - basename
        - filename
        - url
      properties:
        path:
          description: 'The directory path.'
          type: string
          example: test
        dirname:
          description: 'The the parent directory of the directory .'
          type: string
          example: ''
        basename:
          description: 'The basename of the directory.'
          type: string
          example: test
        filename:
          description: 'The filename of the directory (without extension).'
          type: string
          example: test
        type:
          description: 'The directory type.'
          type: string
          enum:
            - dir
        url:
          description: 'The directory public URL, starting with the CDN root.'
          type: string
          example: 'https://cdn.mathrix.fr/test/'
    File:
      description: File
      type: object
      additionalProperties: false
      required:
        - type
        - path
        - dirname
        - basename
        - filename
        - extension
        - size
        - mimetype
        - timestamp
        - url
      properties:
        type:
          description: 'The file type.'
          type: string
          enum:
            - file
        path:
          description: 'The file path on the CDN.'
          type: string
          example: test/Mao.jpg
        dirname:
          description: 'The parent directory of the file.'
          type: string
          example: test
        basename:
          description: 'The basename of the file.'
          type: string
          example: Mao.jpg
        filename:
          description: 'The filename of the file (without extension).'
          type: string
          example: test
        extension:
          description: 'The extension of the file.'
          type: string
          example: jpg
        mimetype:
          description: 'The file mime/type.'
          type: string
          example: image/jpeg
        size:
          description: 'The file size in bytes.'
          type: integer
          example: 4096
        timestamp:
          description: 'The file last-modified timestamp.'
          type: integer
          example: 1540371288
        url:
          description: 'The file public URL, starting with the CDN root.'
          type: string
          example: 'https://cdn.mathrix.fr/test/foo.jpg'
    Group:
      description: Group
      type: object
      properties:
        id:
          description: 'The group id.'
          type: integer
          example: 2
          readOnly: true
        name:
          description: 'The group name.'
          type: string
          example: 'Circuler en ville 1'
        slug:
          description: 'The group slug.'
          type: string
          example: circuler-en-ville-1
        series:
          description: 'The group series.'
          type: array
          items:
            $ref: '#/components/schemas/Series'
          readOnly: true
    Question:
      description: Question
      type: object
      required:
        - id
        - situational
        - questions
        - choices
        - correct_choices
        - correction
        - correction_original
        - image
        - image_original
        - sound
        - sound_original
        - video
        - video_original
        - created_at
        - updated_at
        - theme_id
        - situation_id
      properties:
        id:
          description: 'The question id.'
          type: integer
          example: 15
          readOnly: true
        situational:
          description: 'If the question is situationnal (i.e. relies on a true photo).'
          type: boolean
        reviewed:
          description: 'If the question has been reviewed.'
          type: boolean
        questions:
          description: 'The question''s questions. Can only have 1 or 2 items.'
          type: array
          items:
            type: string
          example:
            - "J'ai obtenu mon permis de conduire. La période probatoire :\n- suite à une formation traditionnelle est"
            - ' - suite à la conduite accompagnée est'
        choices:
          description: 'The question choices. Can only have 2, 3 or 4 items.'
          type: array
          items:
            type: string
          example:
            - 'de 3 ans'
            - 'de 4 ans'
            - 'de 2 ans'
            - 'de 3 ans'
        correct_choices:
          description: 'The question correct choices **indices**. Can only have 2, 3 or 4 items and cannot have more items that `choices`.'
          type: array
          items:
            type: integer
          example:
            - 0
            - 2
        correction:
          description: 'The question correction as plain text.'
          type: string
          example: 'Qu''est-ce que la période probatoire ?\nC''est la période où le permis de conduire ne comporte pas encore la totalité de ses points. A l''obtention du permis, j''ai un capital initial de 6 points. La période probatoire me permet donc de récupérer les 6 points manquants.\n\nSa durée varie selon la formation à la conduite choisie : 2 ans suite à la conduite accompagnée et 3 ans suite à la conduite supervisée ou à une formation traditionnelle.'
        correction_original:
          description: 'The question correction as plain text, **as it was originally imported**.'
          type: string
          nullable: true
          readOnly: true
          example: 'Qu''est-ce que la période probatoire ?\nC''est la période où le permis de conduire ne comporte pas encore la totalité de ses points. A l''obtention du permis, j''ai un capital initial de 6 points. La période probatoire me permet donc de récupérer les 6 points manquants.\n\nSa durée varie selon la formation à la conduite choisie : 2 ans suite à la conduite accompagnée et 3 ans suite à la conduite supervisée ou à une formation traditionnelle.'
        image:
          description: 'The image CDN URI.'
          type: string
          nullable: true
          example: img/questions/15.jpg
        image_original:
          description: 'The image CDN URI, **as it was originally imported**.'
          type: string
          nullable: true
          readOnly: true
          example: img/questions/15-original.jpg
        sound:
          description: 'The sound CDN URI.'
          type: string
          nullable: true
          example: sound/questions/15.mp3
        sound_original:
          description: 'The sound CDN URI, **as it was originally imported**.'
          type: string
          nullable: true
          readOnly: true
          example: sound/questions/15-original.mp3
        video:
          description: 'The video CDN URI.'
          type: string
          nullable: true
          example: videos/questions/15.mp4
        video_original:
          description: 'The video CDN URI, **as it was originally imported**.'
          type: string
          nullable: true
          readOnly: true
          example: videos/questions/15-original.mp4
        source:
          description: 'The question source.'
          type: string
          nullable: true
        created_at:
          description: 'The date/time when the question was created.'
          type: string
          format: date-time
          readOnly: true
        updated_at:
          description: 'The date/time when the question was updated.'
          type: string
          format: date-time
          readOnly: true
        theme_id:
          description: 'The theme id.'
          type: integer
          nullable: true
          example: 4
        situation_id:
          description: 'The situation id.'
          type: integer
          nullable: true
        theme:
          allOf:
            -
              $ref: '#/components/schemas/Theme'
          nullable: true
          readOnly: true
        situation:
          allOf:
            -
              $ref: '#/components/schemas/Situation'
          nullable: true
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          readOnly: true
    Result:
      description: Anwser
      type: object
      additionalProperties: false
      required:
        - id
        - created_at
        - updated_at
        - user_id
        - series_id
        - questions
      properties:
        id:
          description: 'The result id.'
          type: integer
          example: 17
          readOnly: true
        created_at:
          description: 'The date/time when the user was created.'
          type: string
          format: date-time
          readOnly: true
        updated_at:
          description: 'The date/time when the user was updated.'
          type: string
          format: date-time
          readOnly: true
        user_id:
          description: 'The user id.'
          type: integer
          example: 702
          readOnly: true
        series_id:
          description: 'The series id.'
          type: integer
          example: 143
        questions:
          description: 'The results questions.'
          type: array
          items:
            allOf:
              -
                $ref: '#/components/schemas/Question'
              -
                type: object
                properties:
                  answer:
                    $ref: '#/components/schemas/Answer'
    Series:
      description: Series
      type: object
      properties:
        id:
          description: 'The series id.'
          type: integer
          example: 2
          readOnly: true
        name:
          description: 'The series name.'
          type: string
          example: 'Circuler en ville 1'
        difficulty:
          description: 'The series difficulty.'
          type: string
          enum:
            - easy
            - medium
            - hard
            - expert
        questions:
          description: 'The series questions.'
          type: array
          items:
            $ref: '#/components/schemas/Question'
          readOnly: true
    Situation:
      description: Situation
      type: object
      properties:
        id:
          description: 'The situation id.'
          type: integer
          example: 2
          readOnly: true
        name:
          description: 'The situation name.'
          type: string
          example: 'Sur une brettelle d''autoroute'
    Tag:
      description: Tag
      type: object
      properties:
        id:
          description: 'The tag id.'
          type: integer
          example: 2
          readOnly: true
        name:
          description: 'The tag name.'
          type: string
          example: 'feux adaptatifs'
    Theme:
      description: Theme
      type: object
      properties:
        id:
          description: 'The theme id.'
          type: integer
          example: 2
          readOnly: true
        name:
          description: 'The theme name.'
          type: string
          example: 'Le conducteur'
    User:
      description: User
      type: object
      properties:
        id:
          description: 'The user id.'
          type: integer
          example: 24
          readOnly: true
        first_name:
          description: 'The user first name.'
          type: string
          example: John
        last_name:
          description: 'The user last name.'
          type: string
          example: Doe
        email:
          description: 'The user email address.'
          type: string
          format: email
          example: john.doe@example.com
        settings:
          description: 'The user settings.'
          type: object
        scopes:
          description: 'The allowed scopes.'
          type: array
          items:
            type: string
          example:
            - 'questions:read'
            - 'questions:write'
        created_at:
          description: 'The date/time when the user was created.'
          type: string
          format: date-time
        updated_at:
          description: 'The date/time when the user was updated.'
          type: string
          format: date-time
tags:
  -
    name: Auth
    description: 'The Auth API'
  -
    name: Files
    description: 'The Files API'
  -
    name: Groups
    description: 'The Groups API'
  -
    name: Questions
    description: 'The Questions API'
  -
    name: Results
    description: 'The Results API'
  -
    name: Series
    description: 'The Series API'
  -
    name: Situations
    description: 'The Situations API'
  -
    name: Tags
    description: 'The Tags API'
  -
    name: Themes
    description: 'The Themes API'
  -
    name: Users
    description: 'The Users API'
